/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.12 C:\Users\kenta\r3f-1\my-portfolio-app\keyboard-proto.gltf --types
*/

import * as THREE from 'three'
import React, { forwardRef, useImperativeHandle, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { Vector2 } from 'three'
import { useSpring, useSprings, animated, SpringValues, to  } from '@react-spring/three'
import { Vector3 } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    Cube079: THREE.Mesh
    Cube079_1: THREE.Mesh
    Cube079_2: THREE.Mesh
    Cube079_3: THREE.Mesh
    Cube079_4: THREE.Mesh
    Cube079_5: THREE.Mesh
    Cube079_6: THREE.Mesh
    Cube079_7: THREE.Mesh
    Cube079_8: THREE.Mesh
    Cube079_9: THREE.Mesh
    Cube079_10: THREE.Mesh
    Cube079_11: THREE.Mesh
    Cube079_12: THREE.Mesh
    ['Cap1-1']: THREE.Mesh
    ['Cap1-2']: THREE.Mesh
    ['Cap1-3']: THREE.Mesh
    ['Cap1-4']: THREE.Mesh
    ['Cap2-1']: THREE.Mesh
    ['Cap2-2']: THREE.Mesh
    ['Cap2-3']: THREE.Mesh
    ['Cap2-4']: THREE.Mesh
    ['Cap3-1']: THREE.Mesh
    ['Cap3-2']: THREE.Mesh
    ['Cap3-3']: THREE.Mesh
    ['Cap3-4']: THREE.Mesh
    ['Cap4-1']: THREE.Mesh
    ['Cap4-2']: THREE.Mesh
    ['Cap4-3']: THREE.Mesh
    ['Cap4-4']: THREE.Mesh
    CapSpace: THREE.Mesh
  }
  materials: {
    ['switch bottom.010']: THREE.MeshStandardMaterial
    ['switch.010']: THREE.MeshStandardMaterial
    ['switch bottom.008']: THREE.MeshStandardMaterial
    ['switch.008']: THREE.MeshStandardMaterial
    ['switch bottom.007']: THREE.MeshStandardMaterial
    ['switch.007']: THREE.MeshStandardMaterial
    ['switch bottom.009']: THREE.MeshStandardMaterial
    ['switch.009']: THREE.MeshStandardMaterial
    ['switch bottom.030']: THREE.MeshStandardMaterial
    ['switch.030']: THREE.MeshStandardMaterial
    ['switch bottom.031']: THREE.MeshStandardMaterial
    ['switch.031']: THREE.MeshStandardMaterial
    plate: THREE.MeshStandardMaterial
    ['keycaps2.012']: THREE.MeshStandardMaterial
    ['keycaps2.025']: THREE.MeshStandardMaterial
    ['keycaps2.035']: THREE.MeshStandardMaterial
    ['keycaps2.042']: THREE.MeshStandardMaterial
    ['keycaps.016']: THREE.MeshStandardMaterial
    ['keycaps2.045']: THREE.MeshStandardMaterial
    ['keycaps2.044']: THREE.MeshStandardMaterial
    ['keycaps2.043']: THREE.MeshStandardMaterial
    ['keycaps2.015']: THREE.MeshStandardMaterial
    ['keycaps2.013']: THREE.MeshStandardMaterial
    ['keycaps2.014']: THREE.MeshStandardMaterial
    ['keycaps2.022']: THREE.MeshStandardMaterial
    ['keycaps2.023']: THREE.MeshStandardMaterial
    ['keycaps2.024']: THREE.MeshStandardMaterial
    ['keycaps2.032']: THREE.MeshStandardMaterial
    ['keycaps2.033']: THREE.MeshStandardMaterial
    ['keycaps2.034']: THREE.MeshStandardMaterial
  }
}

export interface Handler {
  press(event:KeyboardEvent):void
}

type posVec3 = SpringValues<{
  position:Vector3
}>

const list = [
  {k:'1', v:'Cap1-1'},
  {k:'2', v:'Cap1-2'},
  {k:'3', v:'Cap1-3'},
  {k:'4', v:'Cap1-4'},
  {k:'q', v:'Cap2-1'},
  {k:'w', v:'Cap2-2'},
  {k:'e', v:'Cap2-3'},
  {k:'r', v:'Cap2-4'},
  {k:'a', v:'Cap3-1'},
  {k:'s', v:'Cap3-2'},
  {k:'d', v:'Cap3-3'},
  {k:'f', v:'Cap3-4'},
  {k:'z', v:'Cap4-1'},
  {k:'x', v:'Cap4-2'},
  {k:'c', v:'Cap4-3'},
  {k:'v', v:'Cap4-4'},
  {k:' ', v:'CapSpace'}
]

const KeyBoardProto = forwardRef<Handler, JSX.IntrinsicElements['group']>(
  (props, ref) => {

    const { nodes, materials } = useGLTF('/model/keyboard-proto.gltf') as GLTFResult
    const [pressed, press] = useState(false)

    const [springs, api] = useSprings(list.length, i => ({
      posY: nodes[list[i].v].position.y,
      config: { mass: 0.5, friction: 30, tension: 700, precision: 0.0001 }
    }),[]) 

    useImperativeHandle(ref, () => ({
      press: (event) => {

        api.start((i) => { 
          if(event.key != list[i].k ) return
          if(event.type == "keydown"){
            return { posY: nodes[list[i].v].position.y - 0.002 }
          }
          if(event.type == "keyup") {
            return { posY: nodes[list[i].v].position.y }

          }
          console.log(nodes[list[i].v].position)
        })
      },
    }))

    return (
      <group {...props} dispose={null}>
        <group position={[0, 0.01, 0]}>
          <mesh geometry={nodes.Cube079.geometry} material={materials['switch bottom.010']} />
          <mesh geometry={nodes.Cube079_1.geometry} material={materials['switch.010']} />
          <mesh geometry={nodes.Cube079_2.geometry} material={materials['switch bottom.008']} />
          <mesh geometry={nodes.Cube079_3.geometry} material={materials['switch.008']} />
          <mesh geometry={nodes.Cube079_4.geometry} material={materials['switch bottom.007']} />
          <mesh geometry={nodes.Cube079_5.geometry} material={materials['switch.007']} />
          <mesh geometry={nodes.Cube079_6.geometry} material={materials['switch bottom.009']} />
          <mesh geometry={nodes.Cube079_7.geometry} material={materials['switch.009']} />
          <mesh geometry={nodes.Cube079_8.geometry} material={materials['switch bottom.030']} />
          <mesh geometry={nodes.Cube079_9.geometry} material={materials['switch.030']} />
          <mesh geometry={nodes.Cube079_10.geometry} material={materials['switch bottom.031']} />
          <mesh geometry={nodes.Cube079_11.geometry} material={materials['switch.031']} />
          <mesh geometry={nodes.Cube079_12.geometry} material={materials.plate} />
        </group>
        {springs.map((mesh, i)=>{
          return(
            <animated.mesh
              key={i}
              geometry={nodes[list[i].v].geometry}
              material={list[i].v != 'CapSpace' ? materials['keycaps2.012'] :  materials['keycaps.016']}
              position-x={nodes[list[i].v].position.x}
              position-y={mesh.posY}
              position-z={nodes[list[i].v].position.z}
              />
          )
        })}
      </group>
    )
  }
)

useGLTF.preload('/model/keyboard-proto.gltf')

export default KeyBoardProto
